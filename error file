	[Confidence:9980314,DetectedText:Hello World!,Geometry:BoundingBox:Height:0425822139,Left:0136816561,Top:026530233,Width:0704845,Polygon:[X:0136816561,Y:026530233,X:08416616,Y:02662338,X:0841624856,Y:0692055941,X:013677986,Y:0691124439],Id:0,ParentId:0,Type:Value:LINE,Confidence:9996123,DetectedText:Hello,Geometry:BoundingBox:Height:0409091741,Left:013681592,Top:0272727281,Width:0295262128,Polygon:[X:013681592,Y:0272727281,X:0432006627,Y:0266233772,X:0432835817,Y:06753247,X:013681592,Y:06818182],Id:1,ParentId:0,Type:Value:WORD,Confidence:9964505,DetectedText:World!,Geometry:BoundingBox:Height:0422077924,Left:0465174139,Top:0266233772,Width:0376451075,Polygon:[X:0465174139,Y:0266233772,X:08416252,Y:0266233772,X:08416252,Y:06883117,X:0465174139,Y:06915584],Id:2,ParentId:0,Type:Value:WORD]
///postman data////

{
    "filename": null,
    "fileByte": "",
    "jsondata": "[{\"Confidence\":99.80314,\"DetectedText\":\"Hello World!\",\"Geometry\":{\"BoundingBox\":{\"Height\":0.425822139,\"Left\":0.136816561,\"Top\":0.26530233,\"Width\":0.704845},\"Polygon\":[{\"X\":0.136816561,\"Y\":0.26530233},{\"X\":0.8416616,\"Y\":0.2662338},{\"X\":0.841624856,\"Y\":0.692055941},{\"X\":0.13677986,\"Y\":0.691124439}]},\"Id\":0,\"ParentId\":0,\"Type\":{\"Value\":\"LINE\"}},{\"Confidence\":99.96123,\"DetectedText\":\"Hello\",\"Geometry\":{\"BoundingBox\":{\"Height\":0.409091741,\"Left\":0.13681592,\"Top\":0.272727281,\"Width\":0.295262128},\"Polygon\":[{\"X\":0.13681592,\"Y\":0.272727281},{\"X\":0.432006627,\"Y\":0.266233772},{\"X\":0.432835817,\"Y\":0.6753247},{\"X\":0.13681592,\"Y\":0.6818182}]},\"Id\":1,\"ParentId\":0,\"Type\":{\"Value\":\"WORD\"}},{\"Confidence\":99.64505,\"DetectedText\":\"World!\",\"Geometry\":{\"BoundingBox\":{\"Height\":0.422077924,\"Left\":0.465174139,\"Top\":0.266233772,\"Width\":0.376451075},\"Polygon\":[{\"X\":0.465174139,\"Y\":0.266233772},{\"X\":0.8416252,\"Y\":0.266233772},{\"X\":0.8416252,\"Y\":0.6883117},{\"X\":0.465174139,\"Y\":0.6915584}]},\"Id\":2,\"ParentId\":0,\"Type\":{\"Value\":\"WORD\"}}]"
}



////////////////////React Jsx Code //////////////////////////////////////////////////////////

import React, { Component } from 'react';
import axios from 'axios'




class Image extends Component {
    constructor(props) {
        super(props);
        this.state = { file: '', imagePreviewUrl: '', selectedOption: '', change: [], response: [], path: [], jsonData: [], dText :[] };
    }

    handleSubmit(e) {

        e.preventDefault();
           var byteCode = this.state.imagePreviewUrl.substring((e.target.value).indexOf(',') + 23);
        
        console.log('base64 byte code substring data', byteCode);
 

 
      
        let url = "http://192.168.4.138/MediaAnalysisImage_Amazon/api/DetectText/DetectText"
            console.log(url);
            const data = {  "fileByte": byteCode }
    

            console.log(data)

            const response = axios.post(url, data)
                .then(response => {
                    this.setState({
                        change: response,
                        byteArr: response.data.fileByte,
                        jsonData: response.data.jsondata.replace(/[&\/\\#+()$"~%.'*?<>{}]/g, ''),
                        
                        path: response.data.jsondata.DetectedText ,
                       
                   
                        
                    });
                
      

             
                    console.log(JSON.stringify())
                   const parseData = JSON.parse(response.data.jsondata)
                    console.log(this.state.parseData)
                    let x =""
                    for (let x of  parseData) {
                        console.log('all data', x) // all the data
                        console.log('single data', x.DetectedText)
                        const DetectedText = x.DetectedText
                        console.log('DetectedText ', DetectedText)   // single one
                    }
                    this.setState({ dText:response.DetectedText })
                    console.log('setting dtext',this.state.dText)

                    
                 
                })
        


    }

    radioChange = (e) => {
        this.setState({
            selectedOption: e.target.value

        });

    }
    handleImageChange(e) {
        e.preventDefault();

        let reader = new FileReader();
        let file = e.target.files[0];


        reader.onloadend = () => {
            this.setState({
                file: file,
                imagePreviewUrl: reader.result



            });

        }

        reader.readAsDataURL(file)


    }

    render() {
        const img = "data:image/png;base64" + ',' + this.state.byteArr
        //const prdAcctId = NomDetail.lBrCode + '-' + NomDetail.prdAcctId  
        let { imagePreviewUrl } = this.state;

        let $imagePreview = null;
        if (imagePreviewUrl) {
            $imagePreview = (<img src={imagePreviewUrl} className="img-responsive imgp" />);
            console.log(imagePreviewUrl)
        } else {
            $imagePreview = (<span className="previewText">Please select an Image for Preview</span>);
        }

        return (
            <div className="wrapper">
                <h2 className="text-center heading" >Text Recognization</h2>
                <div className="container ">

                    <section className="celeb">
                        <form className="Fform bg-light mb-4">

                            <div class="form-check">
                                <label class="form-check-label">
                                    <input type="radio" class="form-check-input" name="optradio" value="face" onChange={this.radioChange} />Face
                         </label>
                            </div>
                            <div class="form-check">
                                <label class="form-check-label">
                                    <input type="radio" class="form-check-input" name="optradio" value="celeb" onChange={this.radioChange} />Celeb
                         </label>
                            </div>
                            <div class="form-check mb-4">
                                <label class="form-check-label">
                                    <input type="radio" class="form-check-input" name="optradio" value="text" onChange={this.radioChange} />Text
                         </label>
                            </div>
                            <div class="form-group ">
                                <input className="fileInput"
                                    type="file"
                                    onChange={(e) => this.handleImageChange(e)} class="btn btn-secondary" />
                            </div>
                            <button className="btn btn-success"
                                type="submit"
                                onClick={(e) => this.handleSubmit(e)}>Upload Image</button>
                        </form>
                        <hr></hr>
                        <div className="row grid">
                            <div className="col-md-6">
                                <h3>Input Image</h3>
                                {$imagePreview}
                            </div>
                            <div className="col-md-6">
                                <h3>Output Image</h3>



                                <img src={img} className="img-responsive imgp" />
                            </div>
                        </div>
                        <div>
                            <hr></hr>

                            <h4>Description </h4>
                            <table className="table table-hover">
                                <tr>
                                    <th ><label>Name :- </label></th>
                                    <td>{this.state.jsonData}</td>
                                    <td>{this.state.textData}</td>
                                     
                                    
                                </tr>
                            </table>


                        </div>
                    </section>
                </div>
            </div>
        )
    }
}
export default Image;

